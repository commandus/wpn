// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: android_checkin.proto

#ifndef PROTOBUF_android_5fcheckin_2eproto__INCLUDED
#define PROTOBUF_android_5fcheckin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_android_5fcheckin_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsChromeBuildProtoImpl();
void InitDefaultsChromeBuildProto();
void InitDefaultsAndroidCheckinProtoImpl();
void InitDefaultsAndroidCheckinProto();
inline void InitDefaults() {
  InitDefaultsChromeBuildProto();
  InitDefaultsAndroidCheckinProto();
}
}  // namespace protobuf_android_5fcheckin_2eproto
namespace checkin_proto {
class AndroidCheckinProto;
class AndroidCheckinProtoDefaultTypeInternal;
extern AndroidCheckinProtoDefaultTypeInternal _AndroidCheckinProto_default_instance_;
class ChromeBuildProto;
class ChromeBuildProtoDefaultTypeInternal;
extern ChromeBuildProtoDefaultTypeInternal _ChromeBuildProto_default_instance_;
}  // namespace checkin_proto
namespace checkin_proto {

enum ChromeBuildProto_Platform {
  ChromeBuildProto_Platform_PLATFORM_WIN = 1,
  ChromeBuildProto_Platform_PLATFORM_MAC = 2,
  ChromeBuildProto_Platform_PLATFORM_LINUX = 3,
  ChromeBuildProto_Platform_PLATFORM_CROS = 4,
  ChromeBuildProto_Platform_PLATFORM_IOS = 5,
  ChromeBuildProto_Platform_PLATFORM_ANDROID = 6
};
bool ChromeBuildProto_Platform_IsValid(int value);
const ChromeBuildProto_Platform ChromeBuildProto_Platform_Platform_MIN = ChromeBuildProto_Platform_PLATFORM_WIN;
const ChromeBuildProto_Platform ChromeBuildProto_Platform_Platform_MAX = ChromeBuildProto_Platform_PLATFORM_ANDROID;
const int ChromeBuildProto_Platform_Platform_ARRAYSIZE = ChromeBuildProto_Platform_Platform_MAX + 1;

enum ChromeBuildProto_Channel {
  ChromeBuildProto_Channel_CHANNEL_STABLE = 1,
  ChromeBuildProto_Channel_CHANNEL_BETA = 2,
  ChromeBuildProto_Channel_CHANNEL_DEV = 3,
  ChromeBuildProto_Channel_CHANNEL_CANARY = 4,
  ChromeBuildProto_Channel_CHANNEL_UNKNOWN = 5
};
bool ChromeBuildProto_Channel_IsValid(int value);
const ChromeBuildProto_Channel ChromeBuildProto_Channel_Channel_MIN = ChromeBuildProto_Channel_CHANNEL_STABLE;
const ChromeBuildProto_Channel ChromeBuildProto_Channel_Channel_MAX = ChromeBuildProto_Channel_CHANNEL_UNKNOWN;
const int ChromeBuildProto_Channel_Channel_ARRAYSIZE = ChromeBuildProto_Channel_Channel_MAX + 1;

enum DeviceType {
  DEVICE_ANDROID_OS = 1,
  DEVICE_IOS_OS = 2,
  DEVICE_CHROME_BROWSER = 3,
  DEVICE_CHROME_OS = 4
};
bool DeviceType_IsValid(int value);
const DeviceType DeviceType_MIN = DEVICE_ANDROID_OS;
const DeviceType DeviceType_MAX = DEVICE_CHROME_OS;
const int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

// ===================================================================

class ChromeBuildProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:checkin_proto.ChromeBuildProto) */ {
 public:
  ChromeBuildProto();
  virtual ~ChromeBuildProto();

  ChromeBuildProto(const ChromeBuildProto& from);

  inline ChromeBuildProto& operator=(const ChromeBuildProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChromeBuildProto(ChromeBuildProto&& from) noexcept
    : ChromeBuildProto() {
    *this = ::std::move(from);
  }

  inline ChromeBuildProto& operator=(ChromeBuildProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeBuildProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeBuildProto* internal_default_instance() {
    return reinterpret_cast<const ChromeBuildProto*>(
               &_ChromeBuildProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChromeBuildProto* other);
  friend void swap(ChromeBuildProto& a, ChromeBuildProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChromeBuildProto* New() const PROTOBUF_FINAL { return New(NULL); }

  ChromeBuildProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ChromeBuildProto& from);
  void MergeFrom(const ChromeBuildProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeBuildProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChromeBuildProto_Platform Platform;
  static const Platform PLATFORM_WIN =
    ChromeBuildProto_Platform_PLATFORM_WIN;
  static const Platform PLATFORM_MAC =
    ChromeBuildProto_Platform_PLATFORM_MAC;
  static const Platform PLATFORM_LINUX =
    ChromeBuildProto_Platform_PLATFORM_LINUX;
  static const Platform PLATFORM_CROS =
    ChromeBuildProto_Platform_PLATFORM_CROS;
  static const Platform PLATFORM_IOS =
    ChromeBuildProto_Platform_PLATFORM_IOS;
  static const Platform PLATFORM_ANDROID =
    ChromeBuildProto_Platform_PLATFORM_ANDROID;
  static inline bool Platform_IsValid(int value) {
    return ChromeBuildProto_Platform_IsValid(value);
  }
  static const Platform Platform_MIN =
    ChromeBuildProto_Platform_Platform_MIN;
  static const Platform Platform_MAX =
    ChromeBuildProto_Platform_Platform_MAX;
  static const int Platform_ARRAYSIZE =
    ChromeBuildProto_Platform_Platform_ARRAYSIZE;

  typedef ChromeBuildProto_Channel Channel;
  static const Channel CHANNEL_STABLE =
    ChromeBuildProto_Channel_CHANNEL_STABLE;
  static const Channel CHANNEL_BETA =
    ChromeBuildProto_Channel_CHANNEL_BETA;
  static const Channel CHANNEL_DEV =
    ChromeBuildProto_Channel_CHANNEL_DEV;
  static const Channel CHANNEL_CANARY =
    ChromeBuildProto_Channel_CHANNEL_CANARY;
  static const Channel CHANNEL_UNKNOWN =
    ChromeBuildProto_Channel_CHANNEL_UNKNOWN;
  static inline bool Channel_IsValid(int value) {
    return ChromeBuildProto_Channel_IsValid(value);
  }
  static const Channel Channel_MIN =
    ChromeBuildProto_Channel_Channel_MIN;
  static const Channel Channel_MAX =
    ChromeBuildProto_Channel_Channel_MAX;
  static const int Channel_ARRAYSIZE =
    ChromeBuildProto_Channel_Channel_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string chrome_version = 2;
  bool has_chrome_version() const;
  void clear_chrome_version();
  static const int kChromeVersionFieldNumber = 2;
  const ::std::string& chrome_version() const;
  void set_chrome_version(const ::std::string& value);
  #if LANG_CXX11
  void set_chrome_version(::std::string&& value);
  #endif
  void set_chrome_version(const char* value);
  void set_chrome_version(const char* value, size_t size);
  ::std::string* mutable_chrome_version();
  ::std::string* release_chrome_version();
  void set_allocated_chrome_version(::std::string* chrome_version);

  // optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 1;
  ::checkin_proto::ChromeBuildProto_Platform platform() const;
  void set_platform(::checkin_proto::ChromeBuildProto_Platform value);

  // optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 3;
  ::checkin_proto::ChromeBuildProto_Channel channel() const;
  void set_channel(::checkin_proto::ChromeBuildProto_Channel value);

  // @@protoc_insertion_point(class_scope:checkin_proto.ChromeBuildProto)
 private:
  void set_has_platform();
  void clear_has_platform();
  void set_has_chrome_version();
  void clear_has_chrome_version();
  void set_has_channel();
  void clear_has_channel();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chrome_version_;
  int platform_;
  int channel_;
  friend struct ::protobuf_android_5fcheckin_2eproto::TableStruct;
  friend void ::protobuf_android_5fcheckin_2eproto::InitDefaultsChromeBuildProtoImpl();
};
// -------------------------------------------------------------------

class AndroidCheckinProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:checkin_proto.AndroidCheckinProto) */ {
 public:
  AndroidCheckinProto();
  virtual ~AndroidCheckinProto();

  AndroidCheckinProto(const AndroidCheckinProto& from);

  inline AndroidCheckinProto& operator=(const AndroidCheckinProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AndroidCheckinProto(AndroidCheckinProto&& from) noexcept
    : AndroidCheckinProto() {
    *this = ::std::move(from);
  }

  inline AndroidCheckinProto& operator=(AndroidCheckinProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AndroidCheckinProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AndroidCheckinProto* internal_default_instance() {
    return reinterpret_cast<const AndroidCheckinProto*>(
               &_AndroidCheckinProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AndroidCheckinProto* other);
  friend void swap(AndroidCheckinProto& a, AndroidCheckinProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AndroidCheckinProto* New() const PROTOBUF_FINAL { return New(NULL); }

  AndroidCheckinProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AndroidCheckinProto& from);
  void MergeFrom(const AndroidCheckinProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidCheckinProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cell_operator = 6;
  bool has_cell_operator() const;
  void clear_cell_operator();
  static const int kCellOperatorFieldNumber = 6;
  const ::std::string& cell_operator() const;
  void set_cell_operator(const ::std::string& value);
  #if LANG_CXX11
  void set_cell_operator(::std::string&& value);
  #endif
  void set_cell_operator(const char* value);
  void set_cell_operator(const char* value, size_t size);
  ::std::string* mutable_cell_operator();
  ::std::string* release_cell_operator();
  void set_allocated_cell_operator(::std::string* cell_operator);

  // optional string sim_operator = 7;
  bool has_sim_operator() const;
  void clear_sim_operator();
  static const int kSimOperatorFieldNumber = 7;
  const ::std::string& sim_operator() const;
  void set_sim_operator(const ::std::string& value);
  #if LANG_CXX11
  void set_sim_operator(::std::string&& value);
  #endif
  void set_sim_operator(const char* value);
  void set_sim_operator(const char* value, size_t size);
  ::std::string* mutable_sim_operator();
  ::std::string* release_sim_operator();
  void set_allocated_sim_operator(::std::string* sim_operator);

  // optional string roaming = 8;
  bool has_roaming() const;
  void clear_roaming();
  static const int kRoamingFieldNumber = 8;
  const ::std::string& roaming() const;
  void set_roaming(const ::std::string& value);
  #if LANG_CXX11
  void set_roaming(::std::string&& value);
  #endif
  void set_roaming(const char* value);
  void set_roaming(const char* value, size_t size);
  ::std::string* mutable_roaming();
  ::std::string* release_roaming();
  void set_allocated_roaming(::std::string* roaming);

  // optional .checkin_proto.ChromeBuildProto chrome_build = 13;
  bool has_chrome_build() const;
  void clear_chrome_build();
  static const int kChromeBuildFieldNumber = 13;
  const ::checkin_proto::ChromeBuildProto& chrome_build() const;
  ::checkin_proto::ChromeBuildProto* release_chrome_build();
  ::checkin_proto::ChromeBuildProto* mutable_chrome_build();
  void set_allocated_chrome_build(::checkin_proto::ChromeBuildProto* chrome_build);

  // optional int64 last_checkin_msec = 2;
  bool has_last_checkin_msec() const;
  void clear_last_checkin_msec();
  static const int kLastCheckinMsecFieldNumber = 2;
  ::google::protobuf::int64 last_checkin_msec() const;
  void set_last_checkin_msec(::google::protobuf::int64 value);

  // optional int32 user_number = 9;
  bool has_user_number() const;
  void clear_user_number();
  static const int kUserNumberFieldNumber = 9;
  ::google::protobuf::int32 user_number() const;
  void set_user_number(::google::protobuf::int32 value);

  // optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 12;
  ::checkin_proto::DeviceType type() const;
  void set_type(::checkin_proto::DeviceType value);

  // @@protoc_insertion_point(class_scope:checkin_proto.AndroidCheckinProto)
 private:
  void set_has_last_checkin_msec();
  void clear_has_last_checkin_msec();
  void set_has_cell_operator();
  void clear_has_cell_operator();
  void set_has_sim_operator();
  void clear_has_sim_operator();
  void set_has_roaming();
  void clear_has_roaming();
  void set_has_user_number();
  void clear_has_user_number();
  void set_has_type();
  void clear_has_type();
  void set_has_chrome_build();
  void clear_has_chrome_build();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cell_operator_;
  ::google::protobuf::internal::ArenaStringPtr sim_operator_;
  ::google::protobuf::internal::ArenaStringPtr roaming_;
  ::checkin_proto::ChromeBuildProto* chrome_build_;
  ::google::protobuf::int64 last_checkin_msec_;
  ::google::protobuf::int32 user_number_;
  int type_;
  friend struct ::protobuf_android_5fcheckin_2eproto::TableStruct;
  friend void ::protobuf_android_5fcheckin_2eproto::InitDefaultsAndroidCheckinProtoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeBuildProto

// optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
inline bool ChromeBuildProto::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeBuildProto::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChromeBuildProto::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChromeBuildProto::clear_platform() {
  platform_ = 1;
  clear_has_platform();
}
inline ::checkin_proto::ChromeBuildProto_Platform ChromeBuildProto::platform() const {
  // @@protoc_insertion_point(field_get:checkin_proto.ChromeBuildProto.platform)
  return static_cast< ::checkin_proto::ChromeBuildProto_Platform >(platform_);
}
inline void ChromeBuildProto::set_platform(::checkin_proto::ChromeBuildProto_Platform value) {
  assert(::checkin_proto::ChromeBuildProto_Platform_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.ChromeBuildProto.platform)
}

// optional string chrome_version = 2;
inline bool ChromeBuildProto::has_chrome_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeBuildProto::set_has_chrome_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChromeBuildProto::clear_has_chrome_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChromeBuildProto::clear_chrome_version() {
  chrome_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chrome_version();
}
inline const ::std::string& ChromeBuildProto::chrome_version() const {
  // @@protoc_insertion_point(field_get:checkin_proto.ChromeBuildProto.chrome_version)
  return chrome_version_.GetNoArena();
}
inline void ChromeBuildProto::set_chrome_version(const ::std::string& value) {
  set_has_chrome_version();
  chrome_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.ChromeBuildProto.chrome_version)
}
#if LANG_CXX11
inline void ChromeBuildProto::set_chrome_version(::std::string&& value) {
  set_has_chrome_version();
  chrome_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.ChromeBuildProto.chrome_version)
}
#endif
inline void ChromeBuildProto::set_chrome_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chrome_version();
  chrome_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.ChromeBuildProto.chrome_version)
}
inline void ChromeBuildProto::set_chrome_version(const char* value, size_t size) {
  set_has_chrome_version();
  chrome_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.ChromeBuildProto.chrome_version)
}
inline ::std::string* ChromeBuildProto::mutable_chrome_version() {
  set_has_chrome_version();
  // @@protoc_insertion_point(field_mutable:checkin_proto.ChromeBuildProto.chrome_version)
  return chrome_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeBuildProto::release_chrome_version() {
  // @@protoc_insertion_point(field_release:checkin_proto.ChromeBuildProto.chrome_version)
  clear_has_chrome_version();
  return chrome_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeBuildProto::set_allocated_chrome_version(::std::string* chrome_version) {
  if (chrome_version != NULL) {
    set_has_chrome_version();
  } else {
    clear_has_chrome_version();
  }
  chrome_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chrome_version);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.ChromeBuildProto.chrome_version)
}

// optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
inline bool ChromeBuildProto::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeBuildProto::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChromeBuildProto::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChromeBuildProto::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
inline ::checkin_proto::ChromeBuildProto_Channel ChromeBuildProto::channel() const {
  // @@protoc_insertion_point(field_get:checkin_proto.ChromeBuildProto.channel)
  return static_cast< ::checkin_proto::ChromeBuildProto_Channel >(channel_);
}
inline void ChromeBuildProto::set_channel(::checkin_proto::ChromeBuildProto_Channel value) {
  assert(::checkin_proto::ChromeBuildProto_Channel_IsValid(value));
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.ChromeBuildProto.channel)
}

// -------------------------------------------------------------------

// AndroidCheckinProto

// optional int64 last_checkin_msec = 2;
inline bool AndroidCheckinProto::has_last_checkin_msec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AndroidCheckinProto::set_has_last_checkin_msec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AndroidCheckinProto::clear_has_last_checkin_msec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AndroidCheckinProto::clear_last_checkin_msec() {
  last_checkin_msec_ = GOOGLE_LONGLONG(0);
  clear_has_last_checkin_msec();
}
inline ::google::protobuf::int64 AndroidCheckinProto::last_checkin_msec() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.last_checkin_msec)
  return last_checkin_msec_;
}
inline void AndroidCheckinProto::set_last_checkin_msec(::google::protobuf::int64 value) {
  set_has_last_checkin_msec();
  last_checkin_msec_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.last_checkin_msec)
}

// optional string cell_operator = 6;
inline bool AndroidCheckinProto::has_cell_operator() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidCheckinProto::set_has_cell_operator() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AndroidCheckinProto::clear_has_cell_operator() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AndroidCheckinProto::clear_cell_operator() {
  cell_operator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cell_operator();
}
inline const ::std::string& AndroidCheckinProto::cell_operator() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.cell_operator)
  return cell_operator_.GetNoArena();
}
inline void AndroidCheckinProto::set_cell_operator(const ::std::string& value) {
  set_has_cell_operator();
  cell_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.cell_operator)
}
#if LANG_CXX11
inline void AndroidCheckinProto::set_cell_operator(::std::string&& value) {
  set_has_cell_operator();
  cell_operator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinProto.cell_operator)
}
#endif
inline void AndroidCheckinProto::set_cell_operator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cell_operator();
  cell_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinProto.cell_operator)
}
inline void AndroidCheckinProto::set_cell_operator(const char* value, size_t size) {
  set_has_cell_operator();
  cell_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinProto.cell_operator)
}
inline ::std::string* AndroidCheckinProto::mutable_cell_operator() {
  set_has_cell_operator();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.cell_operator)
  return cell_operator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinProto::release_cell_operator() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.cell_operator)
  clear_has_cell_operator();
  return cell_operator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinProto::set_allocated_cell_operator(::std::string* cell_operator) {
  if (cell_operator != NULL) {
    set_has_cell_operator();
  } else {
    clear_has_cell_operator();
  }
  cell_operator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cell_operator);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.cell_operator)
}

// optional string sim_operator = 7;
inline bool AndroidCheckinProto::has_sim_operator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AndroidCheckinProto::set_has_sim_operator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AndroidCheckinProto::clear_has_sim_operator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AndroidCheckinProto::clear_sim_operator() {
  sim_operator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sim_operator();
}
inline const ::std::string& AndroidCheckinProto::sim_operator() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.sim_operator)
  return sim_operator_.GetNoArena();
}
inline void AndroidCheckinProto::set_sim_operator(const ::std::string& value) {
  set_has_sim_operator();
  sim_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.sim_operator)
}
#if LANG_CXX11
inline void AndroidCheckinProto::set_sim_operator(::std::string&& value) {
  set_has_sim_operator();
  sim_operator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinProto.sim_operator)
}
#endif
inline void AndroidCheckinProto::set_sim_operator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sim_operator();
  sim_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinProto.sim_operator)
}
inline void AndroidCheckinProto::set_sim_operator(const char* value, size_t size) {
  set_has_sim_operator();
  sim_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinProto.sim_operator)
}
inline ::std::string* AndroidCheckinProto::mutable_sim_operator() {
  set_has_sim_operator();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.sim_operator)
  return sim_operator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinProto::release_sim_operator() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.sim_operator)
  clear_has_sim_operator();
  return sim_operator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinProto::set_allocated_sim_operator(::std::string* sim_operator) {
  if (sim_operator != NULL) {
    set_has_sim_operator();
  } else {
    clear_has_sim_operator();
  }
  sim_operator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sim_operator);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.sim_operator)
}

// optional string roaming = 8;
inline bool AndroidCheckinProto::has_roaming() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AndroidCheckinProto::set_has_roaming() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AndroidCheckinProto::clear_has_roaming() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AndroidCheckinProto::clear_roaming() {
  roaming_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roaming();
}
inline const ::std::string& AndroidCheckinProto::roaming() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.roaming)
  return roaming_.GetNoArena();
}
inline void AndroidCheckinProto::set_roaming(const ::std::string& value) {
  set_has_roaming();
  roaming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.roaming)
}
#if LANG_CXX11
inline void AndroidCheckinProto::set_roaming(::std::string&& value) {
  set_has_roaming();
  roaming_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinProto.roaming)
}
#endif
inline void AndroidCheckinProto::set_roaming(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roaming();
  roaming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinProto.roaming)
}
inline void AndroidCheckinProto::set_roaming(const char* value, size_t size) {
  set_has_roaming();
  roaming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinProto.roaming)
}
inline ::std::string* AndroidCheckinProto::mutable_roaming() {
  set_has_roaming();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.roaming)
  return roaming_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinProto::release_roaming() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.roaming)
  clear_has_roaming();
  return roaming_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinProto::set_allocated_roaming(::std::string* roaming) {
  if (roaming != NULL) {
    set_has_roaming();
  } else {
    clear_has_roaming();
  }
  roaming_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roaming);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.roaming)
}

// optional int32 user_number = 9;
inline bool AndroidCheckinProto::has_user_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AndroidCheckinProto::set_has_user_number() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AndroidCheckinProto::clear_has_user_number() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AndroidCheckinProto::clear_user_number() {
  user_number_ = 0;
  clear_has_user_number();
}
inline ::google::protobuf::int32 AndroidCheckinProto::user_number() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.user_number)
  return user_number_;
}
inline void AndroidCheckinProto::set_user_number(::google::protobuf::int32 value) {
  set_has_user_number();
  user_number_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.user_number)
}

// optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
inline bool AndroidCheckinProto::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AndroidCheckinProto::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AndroidCheckinProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AndroidCheckinProto::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::checkin_proto::DeviceType AndroidCheckinProto::type() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.type)
  return static_cast< ::checkin_proto::DeviceType >(type_);
}
inline void AndroidCheckinProto::set_type(::checkin_proto::DeviceType value) {
  assert(::checkin_proto::DeviceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.type)
}

// optional .checkin_proto.ChromeBuildProto chrome_build = 13;
inline bool AndroidCheckinProto::has_chrome_build() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AndroidCheckinProto::set_has_chrome_build() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AndroidCheckinProto::clear_has_chrome_build() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AndroidCheckinProto::clear_chrome_build() {
  if (chrome_build_ != NULL) chrome_build_->Clear();
  clear_has_chrome_build();
}
inline const ::checkin_proto::ChromeBuildProto& AndroidCheckinProto::chrome_build() const {
  const ::checkin_proto::ChromeBuildProto* p = chrome_build_;
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.chrome_build)
  return p != NULL ? *p : *reinterpret_cast<const ::checkin_proto::ChromeBuildProto*>(
      &::checkin_proto::_ChromeBuildProto_default_instance_);
}
inline ::checkin_proto::ChromeBuildProto* AndroidCheckinProto::release_chrome_build() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.chrome_build)
  clear_has_chrome_build();
  ::checkin_proto::ChromeBuildProto* temp = chrome_build_;
  chrome_build_ = NULL;
  return temp;
}
inline ::checkin_proto::ChromeBuildProto* AndroidCheckinProto::mutable_chrome_build() {
  set_has_chrome_build();
  if (chrome_build_ == NULL) {
    chrome_build_ = new ::checkin_proto::ChromeBuildProto;
  }
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.chrome_build)
  return chrome_build_;
}
inline void AndroidCheckinProto::set_allocated_chrome_build(::checkin_proto::ChromeBuildProto* chrome_build) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete chrome_build_;
  }
  if (chrome_build) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chrome_build = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chrome_build, submessage_arena);
    }
    set_has_chrome_build();
  } else {
    clear_has_chrome_build();
  }
  chrome_build_ = chrome_build;
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.chrome_build)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace checkin_proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::checkin_proto::ChromeBuildProto_Platform> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::checkin_proto::ChromeBuildProto_Channel> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::checkin_proto::DeviceType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_android_5fcheckin_2eproto__INCLUDED
