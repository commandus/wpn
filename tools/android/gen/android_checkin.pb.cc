// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: android_checkin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "android_checkin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace checkin_proto {
class ChromeBuildProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeBuildProto> {};
ChromeBuildProtoDefaultTypeInternal _ChromeBuildProto_default_instance_;
class AndroidCheckinProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AndroidCheckinProto> {};
AndroidCheckinProtoDefaultTypeInternal _AndroidCheckinProto_default_instance_;

void protobuf_ShutdownFile_android_5fcheckin_2eproto() {
  _ChromeBuildProto_default_instance_.Shutdown();
  _AndroidCheckinProto_default_instance_.Shutdown();
}

void protobuf_InitDefaults_android_5fcheckin_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ChromeBuildProto_default_instance_.DefaultConstruct();
  _AndroidCheckinProto_default_instance_.DefaultConstruct();
  _AndroidCheckinProto_default_instance_.get_mutable()->chrome_build_ = const_cast< ::checkin_proto::ChromeBuildProto*>(
      ::checkin_proto::ChromeBuildProto::internal_default_instance());
}

void protobuf_InitDefaults_android_5fcheckin_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_android_5fcheckin_2eproto_impl);
}
void protobuf_AddDesc_android_5fcheckin_2eproto_impl() {
  protobuf_InitDefaults_android_5fcheckin_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_android_5fcheckin_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_android_5fcheckin_2eproto_once_);
void protobuf_AddDesc_android_5fcheckin_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_android_5fcheckin_2eproto_once_,
                 &protobuf_AddDesc_android_5fcheckin_2eproto_impl);
}
#ifndef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_android_5fcheckin_2eproto {
  StaticDescriptorInitializer_android_5fcheckin_2eproto() {
    protobuf_AddDesc_android_5fcheckin_2eproto();
  }
} static_descriptor_initializer_android_5fcheckin_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
bool ChromeBuildProto_Platform_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChromeBuildProto_Platform ChromeBuildProto::PLATFORM_WIN;
const ChromeBuildProto_Platform ChromeBuildProto::PLATFORM_MAC;
const ChromeBuildProto_Platform ChromeBuildProto::PLATFORM_LINUX;
const ChromeBuildProto_Platform ChromeBuildProto::PLATFORM_CROS;
const ChromeBuildProto_Platform ChromeBuildProto::PLATFORM_IOS;
const ChromeBuildProto_Platform ChromeBuildProto::PLATFORM_ANDROID;
const ChromeBuildProto_Platform ChromeBuildProto::Platform_MIN;
const ChromeBuildProto_Platform ChromeBuildProto::Platform_MAX;
const int ChromeBuildProto::Platform_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ChromeBuildProto_Channel_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChromeBuildProto_Channel ChromeBuildProto::CHANNEL_STABLE;
const ChromeBuildProto_Channel ChromeBuildProto::CHANNEL_BETA;
const ChromeBuildProto_Channel ChromeBuildProto::CHANNEL_DEV;
const ChromeBuildProto_Channel ChromeBuildProto::CHANNEL_CANARY;
const ChromeBuildProto_Channel ChromeBuildProto::CHANNEL_UNKNOWN;
const ChromeBuildProto_Channel ChromeBuildProto::Channel_MIN;
const ChromeBuildProto_Channel ChromeBuildProto::Channel_MAX;
const int ChromeBuildProto::Channel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeBuildProto::kPlatformFieldNumber;
const int ChromeBuildProto::kChromeVersionFieldNumber;
const int ChromeBuildProto::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeBuildProto::ChromeBuildProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_android_5fcheckin_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:checkin_proto.ChromeBuildProto)
}
ChromeBuildProto::ChromeBuildProto(const ChromeBuildProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chrome_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chrome_version()) {
    chrome_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_version_);
  }
  ::memcpy(&platform_, &from.platform_,
    reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&platform_) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:checkin_proto.ChromeBuildProto)
}

void ChromeBuildProto::SharedCtor() {
  _cached_size_ = 0;
  chrome_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = 1;
  channel_ = 1;
}

ChromeBuildProto::~ChromeBuildProto() {
  // @@protoc_insertion_point(destructor:checkin_proto.ChromeBuildProto)
  SharedDtor();
}

void ChromeBuildProto::SharedDtor() {
  chrome_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChromeBuildProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeBuildProto& ChromeBuildProto::default_instance() {
  protobuf_InitDefaults_android_5fcheckin_2eproto();
  return *internal_default_instance();
}

ChromeBuildProto* ChromeBuildProto::New(::google::protobuf::Arena* arena) const {
  ChromeBuildProto* n = new ChromeBuildProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeBuildProto::Clear() {
// @@protoc_insertion_point(message_clear_start:checkin_proto.ChromeBuildProto)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_chrome_version()) {
      GOOGLE_DCHECK(!chrome_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chrome_version_.UnsafeRawStringPointer())->clear();
    }
    platform_ = 1;
    channel_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeBuildProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:checkin_proto.ChromeBuildProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::checkin_proto::ChromeBuildProto_Platform_IsValid(value)) {
            set_platform(static_cast< ::checkin_proto::ChromeBuildProto_Platform >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chrome_version = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chrome_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::checkin_proto::ChromeBuildProto_Channel_IsValid(value)) {
            set_channel(static_cast< ::checkin_proto::ChromeBuildProto_Channel >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:checkin_proto.ChromeBuildProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:checkin_proto.ChromeBuildProto)
  return false;
#undef DO_
}

void ChromeBuildProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:checkin_proto.ChromeBuildProto)
  // optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->platform(), output);
  }

  // optional string chrome_version = 2;
  if (has_chrome_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chrome_version(), output);
  }

  // optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channel(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:checkin_proto.ChromeBuildProto)
}

size_t ChromeBuildProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:checkin_proto.ChromeBuildProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string chrome_version = 2;
    if (has_chrome_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chrome_version());
    }

    // optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeBuildProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeBuildProto*>(&from));
}

void ChromeBuildProto::MergeFrom(const ChromeBuildProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:checkin_proto.ChromeBuildProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_chrome_version()) {
      set_has_chrome_version();
      chrome_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_version_);
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
}

void ChromeBuildProto::CopyFrom(const ChromeBuildProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:checkin_proto.ChromeBuildProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeBuildProto::IsInitialized() const {
  return true;
}

void ChromeBuildProto::Swap(ChromeBuildProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeBuildProto::InternalSwap(ChromeBuildProto* other) {
  chrome_version_.Swap(&other->chrome_version_);
  std::swap(platform_, other->platform_);
  std::swap(channel_, other->channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeBuildProto::GetTypeName() const {
  return "checkin_proto.ChromeBuildProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeBuildProto

// optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
bool ChromeBuildProto::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChromeBuildProto::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
void ChromeBuildProto::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChromeBuildProto::clear_platform() {
  platform_ = 1;
  clear_has_platform();
}
::checkin_proto::ChromeBuildProto_Platform ChromeBuildProto::platform() const {
  // @@protoc_insertion_point(field_get:checkin_proto.ChromeBuildProto.platform)
  return static_cast< ::checkin_proto::ChromeBuildProto_Platform >(platform_);
}
void ChromeBuildProto::set_platform(::checkin_proto::ChromeBuildProto_Platform value) {
  assert(::checkin_proto::ChromeBuildProto_Platform_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.ChromeBuildProto.platform)
}

// optional string chrome_version = 2;
bool ChromeBuildProto::has_chrome_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeBuildProto::set_has_chrome_version() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeBuildProto::clear_has_chrome_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeBuildProto::clear_chrome_version() {
  chrome_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chrome_version();
}
const ::std::string& ChromeBuildProto::chrome_version() const {
  // @@protoc_insertion_point(field_get:checkin_proto.ChromeBuildProto.chrome_version)
  return chrome_version_.GetNoArena();
}
void ChromeBuildProto::set_chrome_version(const ::std::string& value) {
  set_has_chrome_version();
  chrome_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.ChromeBuildProto.chrome_version)
}
#if LANG_CXX11
void ChromeBuildProto::set_chrome_version(::std::string&& value) {
  set_has_chrome_version();
  chrome_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.ChromeBuildProto.chrome_version)
}
#endif
void ChromeBuildProto::set_chrome_version(const char* value) {
  set_has_chrome_version();
  chrome_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.ChromeBuildProto.chrome_version)
}
void ChromeBuildProto::set_chrome_version(const char* value, size_t size) {
  set_has_chrome_version();
  chrome_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.ChromeBuildProto.chrome_version)
}
::std::string* ChromeBuildProto::mutable_chrome_version() {
  set_has_chrome_version();
  // @@protoc_insertion_point(field_mutable:checkin_proto.ChromeBuildProto.chrome_version)
  return chrome_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeBuildProto::release_chrome_version() {
  // @@protoc_insertion_point(field_release:checkin_proto.ChromeBuildProto.chrome_version)
  clear_has_chrome_version();
  return chrome_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeBuildProto::set_allocated_chrome_version(::std::string* chrome_version) {
  if (chrome_version != NULL) {
    set_has_chrome_version();
  } else {
    clear_has_chrome_version();
  }
  chrome_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chrome_version);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.ChromeBuildProto.chrome_version)
}

// optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
bool ChromeBuildProto::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChromeBuildProto::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
void ChromeBuildProto::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChromeBuildProto::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
::checkin_proto::ChromeBuildProto_Channel ChromeBuildProto::channel() const {
  // @@protoc_insertion_point(field_get:checkin_proto.ChromeBuildProto.channel)
  return static_cast< ::checkin_proto::ChromeBuildProto_Channel >(channel_);
}
void ChromeBuildProto::set_channel(::checkin_proto::ChromeBuildProto_Channel value) {
  assert(::checkin_proto::ChromeBuildProto_Channel_IsValid(value));
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.ChromeBuildProto.channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AndroidCheckinProto::kLastCheckinMsecFieldNumber;
const int AndroidCheckinProto::kCellOperatorFieldNumber;
const int AndroidCheckinProto::kSimOperatorFieldNumber;
const int AndroidCheckinProto::kRoamingFieldNumber;
const int AndroidCheckinProto::kUserNumberFieldNumber;
const int AndroidCheckinProto::kTypeFieldNumber;
const int AndroidCheckinProto::kChromeBuildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AndroidCheckinProto::AndroidCheckinProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_android_5fcheckin_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:checkin_proto.AndroidCheckinProto)
}
AndroidCheckinProto::AndroidCheckinProto(const AndroidCheckinProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cell_operator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cell_operator()) {
    cell_operator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cell_operator_);
  }
  sim_operator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sim_operator()) {
    sim_operator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sim_operator_);
  }
  roaming_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roaming()) {
    roaming_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roaming_);
  }
  if (from.has_chrome_build()) {
    chrome_build_ = new ::checkin_proto::ChromeBuildProto(*from.chrome_build_);
  } else {
    chrome_build_ = NULL;
  }
  ::memcpy(&last_checkin_msec_, &from.last_checkin_msec_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&last_checkin_msec_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:checkin_proto.AndroidCheckinProto)
}

void AndroidCheckinProto::SharedCtor() {
  _cached_size_ = 0;
  cell_operator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sim_operator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roaming_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chrome_build_, 0, reinterpret_cast<char*>(&user_number_) -
    reinterpret_cast<char*>(&chrome_build_) + sizeof(user_number_));
  type_ = 1;
}

AndroidCheckinProto::~AndroidCheckinProto() {
  // @@protoc_insertion_point(destructor:checkin_proto.AndroidCheckinProto)
  SharedDtor();
}

void AndroidCheckinProto::SharedDtor() {
  cell_operator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sim_operator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roaming_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete chrome_build_;
  }
}

void AndroidCheckinProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AndroidCheckinProto& AndroidCheckinProto::default_instance() {
  protobuf_InitDefaults_android_5fcheckin_2eproto();
  return *internal_default_instance();
}

AndroidCheckinProto* AndroidCheckinProto::New(::google::protobuf::Arena* arena) const {
  AndroidCheckinProto* n = new AndroidCheckinProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AndroidCheckinProto::Clear() {
// @@protoc_insertion_point(message_clear_start:checkin_proto.AndroidCheckinProto)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_cell_operator()) {
      GOOGLE_DCHECK(!cell_operator_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cell_operator_.UnsafeRawStringPointer())->clear();
    }
    if (has_sim_operator()) {
      GOOGLE_DCHECK(!sim_operator_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sim_operator_.UnsafeRawStringPointer())->clear();
    }
    if (has_roaming()) {
      GOOGLE_DCHECK(!roaming_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roaming_.UnsafeRawStringPointer())->clear();
    }
    if (has_chrome_build()) {
      GOOGLE_DCHECK(chrome_build_ != NULL);
      chrome_build_->::checkin_proto::ChromeBuildProto::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&last_checkin_msec_, 0, reinterpret_cast<char*>(&user_number_) -
      reinterpret_cast<char*>(&last_checkin_msec_) + sizeof(user_number_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AndroidCheckinProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:checkin_proto.AndroidCheckinProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_checkin_msec = 2;
      case 2: {
        if (tag == 16u) {
          set_has_last_checkin_msec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_checkin_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cell_operator = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cell_operator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sim_operator = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sim_operator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string roaming = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roaming()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_number = 9;
      case 9: {
        if (tag == 72u) {
          set_has_user_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
      case 12: {
        if (tag == 96u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::checkin_proto::DeviceType_IsValid(value)) {
            set_type(static_cast< ::checkin_proto::DeviceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .checkin_proto.ChromeBuildProto chrome_build = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chrome_build()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:checkin_proto.AndroidCheckinProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:checkin_proto.AndroidCheckinProto)
  return false;
#undef DO_
}

void AndroidCheckinProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:checkin_proto.AndroidCheckinProto)
  // optional int64 last_checkin_msec = 2;
  if (has_last_checkin_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_checkin_msec(), output);
  }

  // optional string cell_operator = 6;
  if (has_cell_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cell_operator(), output);
  }

  // optional string sim_operator = 7;
  if (has_sim_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sim_operator(), output);
  }

  // optional string roaming = 8;
  if (has_roaming()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->roaming(), output);
  }

  // optional int32 user_number = 9;
  if (has_user_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->user_number(), output);
  }

  // optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->type(), output);
  }

  // optional .checkin_proto.ChromeBuildProto chrome_build = 13;
  if (has_chrome_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->chrome_build_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:checkin_proto.AndroidCheckinProto)
}

size_t AndroidCheckinProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:checkin_proto.AndroidCheckinProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional string cell_operator = 6;
    if (has_cell_operator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cell_operator());
    }

    // optional string sim_operator = 7;
    if (has_sim_operator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sim_operator());
    }

    // optional string roaming = 8;
    if (has_roaming()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roaming());
    }

    // optional .checkin_proto.ChromeBuildProto chrome_build = 13;
    if (has_chrome_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chrome_build_);
    }

    // optional int64 last_checkin_msec = 2;
    if (has_last_checkin_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_checkin_msec());
    }

    // optional int32 user_number = 9;
    if (has_user_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_number());
    }

    // optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AndroidCheckinProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AndroidCheckinProto*>(&from));
}

void AndroidCheckinProto::MergeFrom(const AndroidCheckinProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:checkin_proto.AndroidCheckinProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_cell_operator()) {
      set_has_cell_operator();
      cell_operator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cell_operator_);
    }
    if (from.has_sim_operator()) {
      set_has_sim_operator();
      sim_operator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sim_operator_);
    }
    if (from.has_roaming()) {
      set_has_roaming();
      roaming_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roaming_);
    }
    if (from.has_chrome_build()) {
      mutable_chrome_build()->::checkin_proto::ChromeBuildProto::MergeFrom(from.chrome_build());
    }
    if (from.has_last_checkin_msec()) {
      set_last_checkin_msec(from.last_checkin_msec());
    }
    if (from.has_user_number()) {
      set_user_number(from.user_number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void AndroidCheckinProto::CopyFrom(const AndroidCheckinProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:checkin_proto.AndroidCheckinProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidCheckinProto::IsInitialized() const {
  return true;
}

void AndroidCheckinProto::Swap(AndroidCheckinProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AndroidCheckinProto::InternalSwap(AndroidCheckinProto* other) {
  cell_operator_.Swap(&other->cell_operator_);
  sim_operator_.Swap(&other->sim_operator_);
  roaming_.Swap(&other->roaming_);
  std::swap(chrome_build_, other->chrome_build_);
  std::swap(last_checkin_msec_, other->last_checkin_msec_);
  std::swap(user_number_, other->user_number_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AndroidCheckinProto::GetTypeName() const {
  return "checkin_proto.AndroidCheckinProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AndroidCheckinProto

// optional int64 last_checkin_msec = 2;
bool AndroidCheckinProto::has_last_checkin_msec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AndroidCheckinProto::set_has_last_checkin_msec() {
  _has_bits_[0] |= 0x00000010u;
}
void AndroidCheckinProto::clear_has_last_checkin_msec() {
  _has_bits_[0] &= ~0x00000010u;
}
void AndroidCheckinProto::clear_last_checkin_msec() {
  last_checkin_msec_ = GOOGLE_LONGLONG(0);
  clear_has_last_checkin_msec();
}
::google::protobuf::int64 AndroidCheckinProto::last_checkin_msec() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.last_checkin_msec)
  return last_checkin_msec_;
}
void AndroidCheckinProto::set_last_checkin_msec(::google::protobuf::int64 value) {
  set_has_last_checkin_msec();
  last_checkin_msec_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.last_checkin_msec)
}

// optional string cell_operator = 6;
bool AndroidCheckinProto::has_cell_operator() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AndroidCheckinProto::set_has_cell_operator() {
  _has_bits_[0] |= 0x00000001u;
}
void AndroidCheckinProto::clear_has_cell_operator() {
  _has_bits_[0] &= ~0x00000001u;
}
void AndroidCheckinProto::clear_cell_operator() {
  cell_operator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cell_operator();
}
const ::std::string& AndroidCheckinProto::cell_operator() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.cell_operator)
  return cell_operator_.GetNoArena();
}
void AndroidCheckinProto::set_cell_operator(const ::std::string& value) {
  set_has_cell_operator();
  cell_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.cell_operator)
}
#if LANG_CXX11
void AndroidCheckinProto::set_cell_operator(::std::string&& value) {
  set_has_cell_operator();
  cell_operator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinProto.cell_operator)
}
#endif
void AndroidCheckinProto::set_cell_operator(const char* value) {
  set_has_cell_operator();
  cell_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinProto.cell_operator)
}
void AndroidCheckinProto::set_cell_operator(const char* value, size_t size) {
  set_has_cell_operator();
  cell_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinProto.cell_operator)
}
::std::string* AndroidCheckinProto::mutable_cell_operator() {
  set_has_cell_operator();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.cell_operator)
  return cell_operator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AndroidCheckinProto::release_cell_operator() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.cell_operator)
  clear_has_cell_operator();
  return cell_operator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AndroidCheckinProto::set_allocated_cell_operator(::std::string* cell_operator) {
  if (cell_operator != NULL) {
    set_has_cell_operator();
  } else {
    clear_has_cell_operator();
  }
  cell_operator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cell_operator);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.cell_operator)
}

// optional string sim_operator = 7;
bool AndroidCheckinProto::has_sim_operator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AndroidCheckinProto::set_has_sim_operator() {
  _has_bits_[0] |= 0x00000002u;
}
void AndroidCheckinProto::clear_has_sim_operator() {
  _has_bits_[0] &= ~0x00000002u;
}
void AndroidCheckinProto::clear_sim_operator() {
  sim_operator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sim_operator();
}
const ::std::string& AndroidCheckinProto::sim_operator() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.sim_operator)
  return sim_operator_.GetNoArena();
}
void AndroidCheckinProto::set_sim_operator(const ::std::string& value) {
  set_has_sim_operator();
  sim_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.sim_operator)
}
#if LANG_CXX11
void AndroidCheckinProto::set_sim_operator(::std::string&& value) {
  set_has_sim_operator();
  sim_operator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinProto.sim_operator)
}
#endif
void AndroidCheckinProto::set_sim_operator(const char* value) {
  set_has_sim_operator();
  sim_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinProto.sim_operator)
}
void AndroidCheckinProto::set_sim_operator(const char* value, size_t size) {
  set_has_sim_operator();
  sim_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinProto.sim_operator)
}
::std::string* AndroidCheckinProto::mutable_sim_operator() {
  set_has_sim_operator();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.sim_operator)
  return sim_operator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AndroidCheckinProto::release_sim_operator() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.sim_operator)
  clear_has_sim_operator();
  return sim_operator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AndroidCheckinProto::set_allocated_sim_operator(::std::string* sim_operator) {
  if (sim_operator != NULL) {
    set_has_sim_operator();
  } else {
    clear_has_sim_operator();
  }
  sim_operator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sim_operator);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.sim_operator)
}

// optional string roaming = 8;
bool AndroidCheckinProto::has_roaming() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AndroidCheckinProto::set_has_roaming() {
  _has_bits_[0] |= 0x00000004u;
}
void AndroidCheckinProto::clear_has_roaming() {
  _has_bits_[0] &= ~0x00000004u;
}
void AndroidCheckinProto::clear_roaming() {
  roaming_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roaming();
}
const ::std::string& AndroidCheckinProto::roaming() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.roaming)
  return roaming_.GetNoArena();
}
void AndroidCheckinProto::set_roaming(const ::std::string& value) {
  set_has_roaming();
  roaming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.roaming)
}
#if LANG_CXX11
void AndroidCheckinProto::set_roaming(::std::string&& value) {
  set_has_roaming();
  roaming_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinProto.roaming)
}
#endif
void AndroidCheckinProto::set_roaming(const char* value) {
  set_has_roaming();
  roaming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinProto.roaming)
}
void AndroidCheckinProto::set_roaming(const char* value, size_t size) {
  set_has_roaming();
  roaming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinProto.roaming)
}
::std::string* AndroidCheckinProto::mutable_roaming() {
  set_has_roaming();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.roaming)
  return roaming_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AndroidCheckinProto::release_roaming() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.roaming)
  clear_has_roaming();
  return roaming_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AndroidCheckinProto::set_allocated_roaming(::std::string* roaming) {
  if (roaming != NULL) {
    set_has_roaming();
  } else {
    clear_has_roaming();
  }
  roaming_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roaming);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.roaming)
}

// optional int32 user_number = 9;
bool AndroidCheckinProto::has_user_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AndroidCheckinProto::set_has_user_number() {
  _has_bits_[0] |= 0x00000020u;
}
void AndroidCheckinProto::clear_has_user_number() {
  _has_bits_[0] &= ~0x00000020u;
}
void AndroidCheckinProto::clear_user_number() {
  user_number_ = 0;
  clear_has_user_number();
}
::google::protobuf::int32 AndroidCheckinProto::user_number() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.user_number)
  return user_number_;
}
void AndroidCheckinProto::set_user_number(::google::protobuf::int32 value) {
  set_has_user_number();
  user_number_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.user_number)
}

// optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
bool AndroidCheckinProto::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AndroidCheckinProto::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void AndroidCheckinProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void AndroidCheckinProto::clear_type() {
  type_ = 1;
  clear_has_type();
}
::checkin_proto::DeviceType AndroidCheckinProto::type() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.type)
  return static_cast< ::checkin_proto::DeviceType >(type_);
}
void AndroidCheckinProto::set_type(::checkin_proto::DeviceType value) {
  assert(::checkin_proto::DeviceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.type)
}

// optional .checkin_proto.ChromeBuildProto chrome_build = 13;
bool AndroidCheckinProto::has_chrome_build() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AndroidCheckinProto::set_has_chrome_build() {
  _has_bits_[0] |= 0x00000008u;
}
void AndroidCheckinProto::clear_has_chrome_build() {
  _has_bits_[0] &= ~0x00000008u;
}
void AndroidCheckinProto::clear_chrome_build() {
  if (chrome_build_ != NULL) chrome_build_->::checkin_proto::ChromeBuildProto::Clear();
  clear_has_chrome_build();
}
const ::checkin_proto::ChromeBuildProto& AndroidCheckinProto::chrome_build() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.chrome_build)
  return chrome_build_ != NULL ? *chrome_build_
                         : *::checkin_proto::ChromeBuildProto::internal_default_instance();
}
::checkin_proto::ChromeBuildProto* AndroidCheckinProto::mutable_chrome_build() {
  set_has_chrome_build();
  if (chrome_build_ == NULL) {
    chrome_build_ = new ::checkin_proto::ChromeBuildProto;
  }
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.chrome_build)
  return chrome_build_;
}
::checkin_proto::ChromeBuildProto* AndroidCheckinProto::release_chrome_build() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.chrome_build)
  clear_has_chrome_build();
  ::checkin_proto::ChromeBuildProto* temp = chrome_build_;
  chrome_build_ = NULL;
  return temp;
}
void AndroidCheckinProto::set_allocated_chrome_build(::checkin_proto::ChromeBuildProto* chrome_build) {
  delete chrome_build_;
  chrome_build_ = chrome_build;
  if (chrome_build) {
    set_has_chrome_build();
  } else {
    clear_has_chrome_build();
  }
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.chrome_build)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace checkin_proto

// @@protoc_insertion_point(global_scope)
