// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: checkin.proto

#ifndef PROTOBUF_checkin_2eproto__INCLUDED
#define PROTOBUF_checkin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "android_checkin.pb.h"
// @@protoc_insertion_point(includes)
namespace checkin_proto {
class AndroidCheckinProto;
class AndroidCheckinProtoDefaultTypeInternal;
extern AndroidCheckinProtoDefaultTypeInternal _AndroidCheckinProto_default_instance_;
class AndroidCheckinRequest;
class AndroidCheckinRequestDefaultTypeInternal;
extern AndroidCheckinRequestDefaultTypeInternal _AndroidCheckinRequest_default_instance_;
class AndroidCheckinResponse;
class AndroidCheckinResponseDefaultTypeInternal;
extern AndroidCheckinResponseDefaultTypeInternal _AndroidCheckinResponse_default_instance_;
class ChromeBuildProto;
class ChromeBuildProtoDefaultTypeInternal;
extern ChromeBuildProtoDefaultTypeInternal _ChromeBuildProto_default_instance_;
class GservicesSetting;
class GservicesSettingDefaultTypeInternal;
extern GservicesSettingDefaultTypeInternal _GservicesSetting_default_instance_;
}  // namespace checkin_proto

namespace checkin_proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_checkin_2eproto();
void protobuf_InitDefaults_checkin_2eproto();

// ===================================================================

class GservicesSetting : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:checkin_proto.GservicesSetting) */ {
 public:
  GservicesSetting();
  virtual ~GservicesSetting();

  GservicesSetting(const GservicesSetting& from);

  inline GservicesSetting& operator=(const GservicesSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GservicesSetting& default_instance();

  static inline const GservicesSetting* internal_default_instance() {
    return reinterpret_cast<const GservicesSetting*>(
               &_GservicesSetting_default_instance_);
  }

  void Swap(GservicesSetting* other);

  // implements Message ----------------------------------------------

  inline GservicesSetting* New() const PROTOBUF_FINAL { return New(NULL); }

  GservicesSetting* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const GservicesSetting& from);
  void MergeFrom(const GservicesSetting& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GservicesSetting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required bytes value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:checkin_proto.GservicesSetting)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_InitDefaults_checkin_2eproto_impl();
  friend void  protobuf_AddDesc_checkin_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_checkin_2eproto();
  friend void protobuf_ShutdownFile_checkin_2eproto();

};
// -------------------------------------------------------------------

class AndroidCheckinRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:checkin_proto.AndroidCheckinRequest) */ {
 public:
  AndroidCheckinRequest();
  virtual ~AndroidCheckinRequest();

  AndroidCheckinRequest(const AndroidCheckinRequest& from);

  inline AndroidCheckinRequest& operator=(const AndroidCheckinRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AndroidCheckinRequest& default_instance();

  static inline const AndroidCheckinRequest* internal_default_instance() {
    return reinterpret_cast<const AndroidCheckinRequest*>(
               &_AndroidCheckinRequest_default_instance_);
  }

  void Swap(AndroidCheckinRequest* other);

  // implements Message ----------------------------------------------

  inline AndroidCheckinRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AndroidCheckinRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AndroidCheckinRequest& from);
  void MergeFrom(const AndroidCheckinRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidCheckinRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string imei = 1;
  bool has_imei() const;
  void clear_imei();
  static const int kImeiFieldNumber = 1;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // optional string meid = 10;
  bool has_meid() const;
  void clear_meid();
  static const int kMeidFieldNumber = 10;
  const ::std::string& meid() const;
  void set_meid(const ::std::string& value);
  #if LANG_CXX11
  void set_meid(::std::string&& value);
  #endif
  void set_meid(const char* value);
  void set_meid(const char* value, size_t size);
  ::std::string* mutable_meid();
  ::std::string* release_meid();
  void set_allocated_meid(::std::string* meid);

  // repeated string mac_addr = 9;
  int mac_addr_size() const;
  void clear_mac_addr();
  static const int kMacAddrFieldNumber = 9;
  const ::std::string& mac_addr(int index) const;
  ::std::string* mutable_mac_addr(int index);
  void set_mac_addr(int index, const ::std::string& value);
  void set_mac_addr(int index, const char* value);
  void set_mac_addr(int index, const char* value, size_t size);
  ::std::string* add_mac_addr();
  void add_mac_addr(const ::std::string& value);
  void add_mac_addr(const char* value);
  void add_mac_addr(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mac_addr() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mac_addr();

  // repeated string mac_addr_type = 19;
  int mac_addr_type_size() const;
  void clear_mac_addr_type();
  static const int kMacAddrTypeFieldNumber = 19;
  const ::std::string& mac_addr_type(int index) const;
  ::std::string* mutable_mac_addr_type(int index);
  void set_mac_addr_type(int index, const ::std::string& value);
  void set_mac_addr_type(int index, const char* value);
  void set_mac_addr_type(int index, const char* value, size_t size);
  ::std::string* add_mac_addr_type();
  void add_mac_addr_type(const ::std::string& value);
  void add_mac_addr_type(const char* value);
  void add_mac_addr_type(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mac_addr_type() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mac_addr_type();

  // optional string serial_number = 16;
  bool has_serial_number() const;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 16;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional string esn = 17;
  bool has_esn() const;
  void clear_esn();
  static const int kEsnFieldNumber = 17;
  const ::std::string& esn() const;
  void set_esn(const ::std::string& value);
  #if LANG_CXX11
  void set_esn(::std::string&& value);
  #endif
  void set_esn(const char* value);
  void set_esn(const char* value, size_t size);
  ::std::string* mutable_esn();
  ::std::string* release_esn();
  void set_allocated_esn(::std::string* esn);

  // optional int64 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 logging_id = 7;
  bool has_logging_id() const;
  void clear_logging_id();
  static const int kLoggingIdFieldNumber = 7;
  ::google::protobuf::int64 logging_id() const;
  void set_logging_id(::google::protobuf::int64 value);

  // optional string digest = 3;
  bool has_digest() const;
  void clear_digest();
  static const int kDigestFieldNumber = 3;
  const ::std::string& digest() const;
  void set_digest(const ::std::string& value);
  #if LANG_CXX11
  void set_digest(::std::string&& value);
  #endif
  void set_digest(const char* value);
  void set_digest(const char* value, size_t size);
  ::std::string* mutable_digest();
  ::std::string* release_digest();
  void set_allocated_digest(::std::string* digest);

  // optional string locale = 6;
  bool has_locale() const;
  void clear_locale();
  static const int kLocaleFieldNumber = 6;
  const ::std::string& locale() const;
  void set_locale(const ::std::string& value);
  #if LANG_CXX11
  void set_locale(::std::string&& value);
  #endif
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  ::std::string* mutable_locale();
  ::std::string* release_locale();
  void set_allocated_locale(::std::string* locale);

  // required .checkin_proto.AndroidCheckinProto checkin = 4;
  bool has_checkin() const;
  void clear_checkin();
  static const int kCheckinFieldNumber = 4;
  const ::checkin_proto::AndroidCheckinProto& checkin() const;
  ::checkin_proto::AndroidCheckinProto* mutable_checkin();
  ::checkin_proto::AndroidCheckinProto* release_checkin();
  void set_allocated_checkin(::checkin_proto::AndroidCheckinProto* checkin);

  // optional string desired_build = 5;
  bool has_desired_build() const;
  void clear_desired_build();
  static const int kDesiredBuildFieldNumber = 5;
  const ::std::string& desired_build() const;
  void set_desired_build(const ::std::string& value);
  #if LANG_CXX11
  void set_desired_build(::std::string&& value);
  #endif
  void set_desired_build(const char* value);
  void set_desired_build(const char* value, size_t size);
  ::std::string* mutable_desired_build();
  ::std::string* release_desired_build();
  void set_allocated_desired_build(::std::string* desired_build);

  // optional string market_checkin = 8;
  bool has_market_checkin() const;
  void clear_market_checkin();
  static const int kMarketCheckinFieldNumber = 8;
  const ::std::string& market_checkin() const;
  void set_market_checkin(const ::std::string& value);
  #if LANG_CXX11
  void set_market_checkin(::std::string&& value);
  #endif
  void set_market_checkin(const char* value);
  void set_market_checkin(const char* value, size_t size);
  ::std::string* mutable_market_checkin();
  ::std::string* release_market_checkin();
  void set_allocated_market_checkin(::std::string* market_checkin);

  // repeated string account_cookie = 11;
  int account_cookie_size() const;
  void clear_account_cookie();
  static const int kAccountCookieFieldNumber = 11;
  const ::std::string& account_cookie(int index) const;
  ::std::string* mutable_account_cookie(int index);
  void set_account_cookie(int index, const ::std::string& value);
  void set_account_cookie(int index, const char* value);
  void set_account_cookie(int index, const char* value, size_t size);
  ::std::string* add_account_cookie();
  void add_account_cookie(const ::std::string& value);
  void add_account_cookie(const char* value);
  void add_account_cookie(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& account_cookie() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_account_cookie();

  // optional string time_zone = 12;
  bool has_time_zone() const;
  void clear_time_zone();
  static const int kTimeZoneFieldNumber = 12;
  const ::std::string& time_zone() const;
  void set_time_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_time_zone(::std::string&& value);
  #endif
  void set_time_zone(const char* value);
  void set_time_zone(const char* value, size_t size);
  ::std::string* mutable_time_zone();
  ::std::string* release_time_zone();
  void set_allocated_time_zone(::std::string* time_zone);

  // optional fixed64 security_token = 13;
  bool has_security_token() const;
  void clear_security_token();
  static const int kSecurityTokenFieldNumber = 13;
  ::google::protobuf::uint64 security_token() const;
  void set_security_token(::google::protobuf::uint64 value);

  // optional int32 version = 14;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 14;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // repeated string ota_cert = 15;
  int ota_cert_size() const;
  void clear_ota_cert();
  static const int kOtaCertFieldNumber = 15;
  const ::std::string& ota_cert(int index) const;
  ::std::string* mutable_ota_cert(int index);
  void set_ota_cert(int index, const ::std::string& value);
  void set_ota_cert(int index, const char* value);
  void set_ota_cert(int index, const char* value, size_t size);
  ::std::string* add_ota_cert();
  void add_ota_cert(const ::std::string& value);
  void add_ota_cert(const char* value);
  void add_ota_cert(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ota_cert() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ota_cert();

  // optional int32 fragment = 20;
  bool has_fragment() const;
  void clear_fragment();
  static const int kFragmentFieldNumber = 20;
  ::google::protobuf::int32 fragment() const;
  void set_fragment(::google::protobuf::int32 value);

  // optional string user_name = 21;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 21;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // optional int32 user_serial_number = 22;
  bool has_user_serial_number() const;
  void clear_user_serial_number();
  static const int kUserSerialNumberFieldNumber = 22;
  ::google::protobuf::int32 user_serial_number() const;
  void set_user_serial_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:checkin_proto.AndroidCheckinRequest)
 private:
  void set_has_imei();
  void clear_has_imei();
  void set_has_meid();
  void clear_has_meid();
  void set_has_serial_number();
  void clear_has_serial_number();
  void set_has_esn();
  void clear_has_esn();
  void set_has_id();
  void clear_has_id();
  void set_has_logging_id();
  void clear_has_logging_id();
  void set_has_digest();
  void clear_has_digest();
  void set_has_locale();
  void clear_has_locale();
  void set_has_checkin();
  void clear_has_checkin();
  void set_has_desired_build();
  void clear_has_desired_build();
  void set_has_market_checkin();
  void clear_has_market_checkin();
  void set_has_time_zone();
  void clear_has_time_zone();
  void set_has_security_token();
  void clear_has_security_token();
  void set_has_version();
  void clear_has_version();
  void set_has_fragment();
  void clear_has_fragment();
  void set_has_user_name();
  void clear_has_user_name();
  void set_has_user_serial_number();
  void clear_has_user_serial_number();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mac_addr_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mac_addr_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> account_cookie_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ota_cert_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::internal::ArenaStringPtr meid_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr esn_;
  ::google::protobuf::internal::ArenaStringPtr digest_;
  ::google::protobuf::internal::ArenaStringPtr locale_;
  ::google::protobuf::internal::ArenaStringPtr desired_build_;
  ::google::protobuf::internal::ArenaStringPtr market_checkin_;
  ::google::protobuf::internal::ArenaStringPtr time_zone_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::checkin_proto::AndroidCheckinProto* checkin_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 logging_id_;
  ::google::protobuf::uint64 security_token_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 fragment_;
  ::google::protobuf::int32 user_serial_number_;
  friend void  protobuf_InitDefaults_checkin_2eproto_impl();
  friend void  protobuf_AddDesc_checkin_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_checkin_2eproto();
  friend void protobuf_ShutdownFile_checkin_2eproto();

};
// -------------------------------------------------------------------

class AndroidCheckinResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:checkin_proto.AndroidCheckinResponse) */ {
 public:
  AndroidCheckinResponse();
  virtual ~AndroidCheckinResponse();

  AndroidCheckinResponse(const AndroidCheckinResponse& from);

  inline AndroidCheckinResponse& operator=(const AndroidCheckinResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AndroidCheckinResponse& default_instance();

  static inline const AndroidCheckinResponse* internal_default_instance() {
    return reinterpret_cast<const AndroidCheckinResponse*>(
               &_AndroidCheckinResponse_default_instance_);
  }

  void Swap(AndroidCheckinResponse* other);

  // implements Message ----------------------------------------------

  inline AndroidCheckinResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AndroidCheckinResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AndroidCheckinResponse& from);
  void MergeFrom(const AndroidCheckinResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidCheckinResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool stats_ok = 1;
  bool has_stats_ok() const;
  void clear_stats_ok();
  static const int kStatsOkFieldNumber = 1;
  bool stats_ok() const;
  void set_stats_ok(bool value);

  // optional int64 time_msec = 3;
  bool has_time_msec() const;
  void clear_time_msec();
  static const int kTimeMsecFieldNumber = 3;
  ::google::protobuf::int64 time_msec() const;
  void set_time_msec(::google::protobuf::int64 value);

  // optional string digest = 4;
  bool has_digest() const;
  void clear_digest();
  static const int kDigestFieldNumber = 4;
  const ::std::string& digest() const;
  void set_digest(const ::std::string& value);
  #if LANG_CXX11
  void set_digest(::std::string&& value);
  #endif
  void set_digest(const char* value);
  void set_digest(const char* value, size_t size);
  ::std::string* mutable_digest();
  ::std::string* release_digest();
  void set_allocated_digest(::std::string* digest);

  // optional bool settings_diff = 9;
  bool has_settings_diff() const;
  void clear_settings_diff();
  static const int kSettingsDiffFieldNumber = 9;
  bool settings_diff() const;
  void set_settings_diff(bool value);

  // repeated string delete_setting = 10;
  int delete_setting_size() const;
  void clear_delete_setting();
  static const int kDeleteSettingFieldNumber = 10;
  const ::std::string& delete_setting(int index) const;
  ::std::string* mutable_delete_setting(int index);
  void set_delete_setting(int index, const ::std::string& value);
  void set_delete_setting(int index, const char* value);
  void set_delete_setting(int index, const char* value, size_t size);
  ::std::string* add_delete_setting();
  void add_delete_setting(const ::std::string& value);
  void add_delete_setting(const char* value);
  void add_delete_setting(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& delete_setting() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_delete_setting();

  // repeated .checkin_proto.GservicesSetting setting = 5;
  int setting_size() const;
  void clear_setting();
  static const int kSettingFieldNumber = 5;
  const ::checkin_proto::GservicesSetting& setting(int index) const;
  ::checkin_proto::GservicesSetting* mutable_setting(int index);
  ::checkin_proto::GservicesSetting* add_setting();
  ::google::protobuf::RepeatedPtrField< ::checkin_proto::GservicesSetting >*
      mutable_setting();
  const ::google::protobuf::RepeatedPtrField< ::checkin_proto::GservicesSetting >&
      setting() const;

  // optional bool market_ok = 6;
  bool has_market_ok() const;
  void clear_market_ok();
  static const int kMarketOkFieldNumber = 6;
  bool market_ok() const;
  void set_market_ok(bool value);

  // optional fixed64 android_id = 7;
  bool has_android_id() const;
  void clear_android_id();
  static const int kAndroidIdFieldNumber = 7;
  ::google::protobuf::uint64 android_id() const;
  void set_android_id(::google::protobuf::uint64 value);

  // optional fixed64 security_token = 8;
  bool has_security_token() const;
  void clear_security_token();
  static const int kSecurityTokenFieldNumber = 8;
  ::google::protobuf::uint64 security_token() const;
  void set_security_token(::google::protobuf::uint64 value);

  // optional string version_info = 11;
  bool has_version_info() const;
  void clear_version_info();
  static const int kVersionInfoFieldNumber = 11;
  const ::std::string& version_info() const;
  void set_version_info(const ::std::string& value);
  #if LANG_CXX11
  void set_version_info(::std::string&& value);
  #endif
  void set_version_info(const char* value);
  void set_version_info(const char* value, size_t size);
  ::std::string* mutable_version_info();
  ::std::string* release_version_info();
  void set_allocated_version_info(::std::string* version_info);

  // @@protoc_insertion_point(class_scope:checkin_proto.AndroidCheckinResponse)
 private:
  void set_has_stats_ok();
  void clear_has_stats_ok();
  void set_has_time_msec();
  void clear_has_time_msec();
  void set_has_digest();
  void clear_has_digest();
  void set_has_settings_diff();
  void clear_has_settings_diff();
  void set_has_market_ok();
  void clear_has_market_ok();
  void set_has_android_id();
  void clear_has_android_id();
  void set_has_security_token();
  void clear_has_security_token();
  void set_has_version_info();
  void clear_has_version_info();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> delete_setting_;
  ::google::protobuf::RepeatedPtrField< ::checkin_proto::GservicesSetting > setting_;
  ::google::protobuf::internal::ArenaStringPtr digest_;
  ::google::protobuf::internal::ArenaStringPtr version_info_;
  ::google::protobuf::int64 time_msec_;
  ::google::protobuf::uint64 android_id_;
  ::google::protobuf::uint64 security_token_;
  bool stats_ok_;
  bool settings_diff_;
  bool market_ok_;
  friend void  protobuf_InitDefaults_checkin_2eproto_impl();
  friend void  protobuf_AddDesc_checkin_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_checkin_2eproto();
  friend void protobuf_ShutdownFile_checkin_2eproto();

};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GservicesSetting

// required bytes name = 1;
inline bool GservicesSetting::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GservicesSetting::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GservicesSetting::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GservicesSetting::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& GservicesSetting::name() const {
  // @@protoc_insertion_point(field_get:checkin_proto.GservicesSetting.name)
  return name_.GetNoArena();
}
inline void GservicesSetting::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.GservicesSetting.name)
}
#if LANG_CXX11
inline void GservicesSetting::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.GservicesSetting.name)
}
#endif
inline void GservicesSetting::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.GservicesSetting.name)
}
inline void GservicesSetting::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.GservicesSetting.name)
}
inline ::std::string* GservicesSetting::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:checkin_proto.GservicesSetting.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GservicesSetting::release_name() {
  // @@protoc_insertion_point(field_release:checkin_proto.GservicesSetting.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GservicesSetting::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.GservicesSetting.name)
}

// required bytes value = 2;
inline bool GservicesSetting::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GservicesSetting::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GservicesSetting::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GservicesSetting::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& GservicesSetting::value() const {
  // @@protoc_insertion_point(field_get:checkin_proto.GservicesSetting.value)
  return value_.GetNoArena();
}
inline void GservicesSetting::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.GservicesSetting.value)
}
#if LANG_CXX11
inline void GservicesSetting::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.GservicesSetting.value)
}
#endif
inline void GservicesSetting::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.GservicesSetting.value)
}
inline void GservicesSetting::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.GservicesSetting.value)
}
inline ::std::string* GservicesSetting::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:checkin_proto.GservicesSetting.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GservicesSetting::release_value() {
  // @@protoc_insertion_point(field_release:checkin_proto.GservicesSetting.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GservicesSetting::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.GservicesSetting.value)
}

// -------------------------------------------------------------------

// AndroidCheckinRequest

// optional string imei = 1;
inline bool AndroidCheckinRequest::has_imei() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidCheckinRequest::set_has_imei() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AndroidCheckinRequest::clear_has_imei() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AndroidCheckinRequest::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
inline const ::std::string& AndroidCheckinRequest::imei() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.imei)
  return imei_.GetNoArena();
}
inline void AndroidCheckinRequest::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.imei)
}
#if LANG_CXX11
inline void AndroidCheckinRequest::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.imei)
}
#endif
inline void AndroidCheckinRequest::set_imei(const char* value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.imei)
}
inline void AndroidCheckinRequest::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.imei)
}
inline ::std::string* AndroidCheckinRequest::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinRequest::release_imei() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.imei)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinRequest::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.imei)
}

// optional string meid = 10;
inline bool AndroidCheckinRequest::has_meid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AndroidCheckinRequest::set_has_meid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AndroidCheckinRequest::clear_has_meid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AndroidCheckinRequest::clear_meid() {
  meid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meid();
}
inline const ::std::string& AndroidCheckinRequest::meid() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.meid)
  return meid_.GetNoArena();
}
inline void AndroidCheckinRequest::set_meid(const ::std::string& value) {
  set_has_meid();
  meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.meid)
}
#if LANG_CXX11
inline void AndroidCheckinRequest::set_meid(::std::string&& value) {
  set_has_meid();
  meid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.meid)
}
#endif
inline void AndroidCheckinRequest::set_meid(const char* value) {
  set_has_meid();
  meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.meid)
}
inline void AndroidCheckinRequest::set_meid(const char* value, size_t size) {
  set_has_meid();
  meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.meid)
}
inline ::std::string* AndroidCheckinRequest::mutable_meid() {
  set_has_meid();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.meid)
  return meid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinRequest::release_meid() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.meid)
  clear_has_meid();
  return meid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinRequest::set_allocated_meid(::std::string* meid) {
  if (meid != NULL) {
    set_has_meid();
  } else {
    clear_has_meid();
  }
  meid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meid);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.meid)
}

// repeated string mac_addr = 9;
inline int AndroidCheckinRequest::mac_addr_size() const {
  return mac_addr_.size();
}
inline void AndroidCheckinRequest::clear_mac_addr() {
  mac_addr_.Clear();
}
inline const ::std::string& AndroidCheckinRequest::mac_addr(int index) const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.mac_addr)
  return mac_addr_.Get(index);
}
inline ::std::string* AndroidCheckinRequest::mutable_mac_addr(int index) {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.mac_addr)
  return mac_addr_.Mutable(index);
}
inline void AndroidCheckinRequest::set_mac_addr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.mac_addr)
  mac_addr_.Mutable(index)->assign(value);
}
inline void AndroidCheckinRequest::set_mac_addr(int index, const char* value) {
  mac_addr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.mac_addr)
}
inline void AndroidCheckinRequest::set_mac_addr(int index, const char* value, size_t size) {
  mac_addr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.mac_addr)
}
inline ::std::string* AndroidCheckinRequest::add_mac_addr() {
  // @@protoc_insertion_point(field_add_mutable:checkin_proto.AndroidCheckinRequest.mac_addr)
  return mac_addr_.Add();
}
inline void AndroidCheckinRequest::add_mac_addr(const ::std::string& value) {
  mac_addr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinRequest.mac_addr)
}
inline void AndroidCheckinRequest::add_mac_addr(const char* value) {
  mac_addr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:checkin_proto.AndroidCheckinRequest.mac_addr)
}
inline void AndroidCheckinRequest::add_mac_addr(const char* value, size_t size) {
  mac_addr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:checkin_proto.AndroidCheckinRequest.mac_addr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AndroidCheckinRequest::mac_addr() const {
  // @@protoc_insertion_point(field_list:checkin_proto.AndroidCheckinRequest.mac_addr)
  return mac_addr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AndroidCheckinRequest::mutable_mac_addr() {
  // @@protoc_insertion_point(field_mutable_list:checkin_proto.AndroidCheckinRequest.mac_addr)
  return &mac_addr_;
}

// repeated string mac_addr_type = 19;
inline int AndroidCheckinRequest::mac_addr_type_size() const {
  return mac_addr_type_.size();
}
inline void AndroidCheckinRequest::clear_mac_addr_type() {
  mac_addr_type_.Clear();
}
inline const ::std::string& AndroidCheckinRequest::mac_addr_type(int index) const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  return mac_addr_type_.Get(index);
}
inline ::std::string* AndroidCheckinRequest::mutable_mac_addr_type(int index) {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  return mac_addr_type_.Mutable(index);
}
inline void AndroidCheckinRequest::set_mac_addr_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  mac_addr_type_.Mutable(index)->assign(value);
}
inline void AndroidCheckinRequest::set_mac_addr_type(int index, const char* value) {
  mac_addr_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.mac_addr_type)
}
inline void AndroidCheckinRequest::set_mac_addr_type(int index, const char* value, size_t size) {
  mac_addr_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.mac_addr_type)
}
inline ::std::string* AndroidCheckinRequest::add_mac_addr_type() {
  // @@protoc_insertion_point(field_add_mutable:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  return mac_addr_type_.Add();
}
inline void AndroidCheckinRequest::add_mac_addr_type(const ::std::string& value) {
  mac_addr_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinRequest.mac_addr_type)
}
inline void AndroidCheckinRequest::add_mac_addr_type(const char* value) {
  mac_addr_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:checkin_proto.AndroidCheckinRequest.mac_addr_type)
}
inline void AndroidCheckinRequest::add_mac_addr_type(const char* value, size_t size) {
  mac_addr_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:checkin_proto.AndroidCheckinRequest.mac_addr_type)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AndroidCheckinRequest::mac_addr_type() const {
  // @@protoc_insertion_point(field_list:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  return mac_addr_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AndroidCheckinRequest::mutable_mac_addr_type() {
  // @@protoc_insertion_point(field_mutable_list:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  return &mac_addr_type_;
}

// optional string serial_number = 16;
inline bool AndroidCheckinRequest::has_serial_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AndroidCheckinRequest::set_has_serial_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AndroidCheckinRequest::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AndroidCheckinRequest::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
inline const ::std::string& AndroidCheckinRequest::serial_number() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.serial_number)
  return serial_number_.GetNoArena();
}
inline void AndroidCheckinRequest::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.serial_number)
}
#if LANG_CXX11
inline void AndroidCheckinRequest::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.serial_number)
}
#endif
inline void AndroidCheckinRequest::set_serial_number(const char* value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.serial_number)
}
inline void AndroidCheckinRequest::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.serial_number)
}
inline ::std::string* AndroidCheckinRequest::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinRequest::release_serial_number() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinRequest::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.serial_number)
}

// optional string esn = 17;
inline bool AndroidCheckinRequest::has_esn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AndroidCheckinRequest::set_has_esn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AndroidCheckinRequest::clear_has_esn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AndroidCheckinRequest::clear_esn() {
  esn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_esn();
}
inline const ::std::string& AndroidCheckinRequest::esn() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.esn)
  return esn_.GetNoArena();
}
inline void AndroidCheckinRequest::set_esn(const ::std::string& value) {
  set_has_esn();
  esn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.esn)
}
#if LANG_CXX11
inline void AndroidCheckinRequest::set_esn(::std::string&& value) {
  set_has_esn();
  esn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.esn)
}
#endif
inline void AndroidCheckinRequest::set_esn(const char* value) {
  set_has_esn();
  esn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.esn)
}
inline void AndroidCheckinRequest::set_esn(const char* value, size_t size) {
  set_has_esn();
  esn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.esn)
}
inline ::std::string* AndroidCheckinRequest::mutable_esn() {
  set_has_esn();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.esn)
  return esn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinRequest::release_esn() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.esn)
  clear_has_esn();
  return esn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinRequest::set_allocated_esn(::std::string* esn) {
  if (esn != NULL) {
    set_has_esn();
  } else {
    clear_has_esn();
  }
  esn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), esn);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.esn)
}

// optional int64 id = 2;
inline bool AndroidCheckinRequest::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AndroidCheckinRequest::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AndroidCheckinRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AndroidCheckinRequest::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 AndroidCheckinRequest::id() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.id)
  return id_;
}
inline void AndroidCheckinRequest::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.id)
}

// optional int64 logging_id = 7;
inline bool AndroidCheckinRequest::has_logging_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AndroidCheckinRequest::set_has_logging_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AndroidCheckinRequest::clear_has_logging_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AndroidCheckinRequest::clear_logging_id() {
  logging_id_ = GOOGLE_LONGLONG(0);
  clear_has_logging_id();
}
inline ::google::protobuf::int64 AndroidCheckinRequest::logging_id() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.logging_id)
  return logging_id_;
}
inline void AndroidCheckinRequest::set_logging_id(::google::protobuf::int64 value) {
  set_has_logging_id();
  logging_id_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.logging_id)
}

// optional string digest = 3;
inline bool AndroidCheckinRequest::has_digest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AndroidCheckinRequest::set_has_digest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AndroidCheckinRequest::clear_has_digest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AndroidCheckinRequest::clear_digest() {
  digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_digest();
}
inline const ::std::string& AndroidCheckinRequest::digest() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.digest)
  return digest_.GetNoArena();
}
inline void AndroidCheckinRequest::set_digest(const ::std::string& value) {
  set_has_digest();
  digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.digest)
}
#if LANG_CXX11
inline void AndroidCheckinRequest::set_digest(::std::string&& value) {
  set_has_digest();
  digest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.digest)
}
#endif
inline void AndroidCheckinRequest::set_digest(const char* value) {
  set_has_digest();
  digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.digest)
}
inline void AndroidCheckinRequest::set_digest(const char* value, size_t size) {
  set_has_digest();
  digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.digest)
}
inline ::std::string* AndroidCheckinRequest::mutable_digest() {
  set_has_digest();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.digest)
  return digest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinRequest::release_digest() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.digest)
  clear_has_digest();
  return digest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinRequest::set_allocated_digest(::std::string* digest) {
  if (digest != NULL) {
    set_has_digest();
  } else {
    clear_has_digest();
  }
  digest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), digest);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.digest)
}

// optional string locale = 6;
inline bool AndroidCheckinRequest::has_locale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AndroidCheckinRequest::set_has_locale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AndroidCheckinRequest::clear_has_locale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AndroidCheckinRequest::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locale();
}
inline const ::std::string& AndroidCheckinRequest::locale() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.locale)
  return locale_.GetNoArena();
}
inline void AndroidCheckinRequest::set_locale(const ::std::string& value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.locale)
}
#if LANG_CXX11
inline void AndroidCheckinRequest::set_locale(::std::string&& value) {
  set_has_locale();
  locale_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.locale)
}
#endif
inline void AndroidCheckinRequest::set_locale(const char* value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.locale)
}
inline void AndroidCheckinRequest::set_locale(const char* value, size_t size) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.locale)
}
inline ::std::string* AndroidCheckinRequest::mutable_locale() {
  set_has_locale();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinRequest::release_locale() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.locale)
  clear_has_locale();
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinRequest::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    set_has_locale();
  } else {
    clear_has_locale();
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.locale)
}

// required .checkin_proto.AndroidCheckinProto checkin = 4;
inline bool AndroidCheckinRequest::has_checkin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AndroidCheckinRequest::set_has_checkin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AndroidCheckinRequest::clear_has_checkin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AndroidCheckinRequest::clear_checkin() {
  if (checkin_ != NULL) checkin_->::checkin_proto::AndroidCheckinProto::Clear();
  clear_has_checkin();
}
inline const ::checkin_proto::AndroidCheckinProto& AndroidCheckinRequest::checkin() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.checkin)
  return checkin_ != NULL ? *checkin_
                         : *::checkin_proto::AndroidCheckinProto::internal_default_instance();
}
inline ::checkin_proto::AndroidCheckinProto* AndroidCheckinRequest::mutable_checkin() {
  set_has_checkin();
  if (checkin_ == NULL) {
    checkin_ = new ::checkin_proto::AndroidCheckinProto;
  }
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.checkin)
  return checkin_;
}
inline ::checkin_proto::AndroidCheckinProto* AndroidCheckinRequest::release_checkin() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.checkin)
  clear_has_checkin();
  ::checkin_proto::AndroidCheckinProto* temp = checkin_;
  checkin_ = NULL;
  return temp;
}
inline void AndroidCheckinRequest::set_allocated_checkin(::checkin_proto::AndroidCheckinProto* checkin) {
  delete checkin_;
  checkin_ = checkin;
  if (checkin) {
    set_has_checkin();
  } else {
    clear_has_checkin();
  }
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.checkin)
}

// optional string desired_build = 5;
inline bool AndroidCheckinRequest::has_desired_build() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AndroidCheckinRequest::set_has_desired_build() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AndroidCheckinRequest::clear_has_desired_build() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AndroidCheckinRequest::clear_desired_build() {
  desired_build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desired_build();
}
inline const ::std::string& AndroidCheckinRequest::desired_build() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.desired_build)
  return desired_build_.GetNoArena();
}
inline void AndroidCheckinRequest::set_desired_build(const ::std::string& value) {
  set_has_desired_build();
  desired_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.desired_build)
}
#if LANG_CXX11
inline void AndroidCheckinRequest::set_desired_build(::std::string&& value) {
  set_has_desired_build();
  desired_build_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.desired_build)
}
#endif
inline void AndroidCheckinRequest::set_desired_build(const char* value) {
  set_has_desired_build();
  desired_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.desired_build)
}
inline void AndroidCheckinRequest::set_desired_build(const char* value, size_t size) {
  set_has_desired_build();
  desired_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.desired_build)
}
inline ::std::string* AndroidCheckinRequest::mutable_desired_build() {
  set_has_desired_build();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.desired_build)
  return desired_build_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinRequest::release_desired_build() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.desired_build)
  clear_has_desired_build();
  return desired_build_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinRequest::set_allocated_desired_build(::std::string* desired_build) {
  if (desired_build != NULL) {
    set_has_desired_build();
  } else {
    clear_has_desired_build();
  }
  desired_build_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_build);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.desired_build)
}

// optional string market_checkin = 8;
inline bool AndroidCheckinRequest::has_market_checkin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AndroidCheckinRequest::set_has_market_checkin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AndroidCheckinRequest::clear_has_market_checkin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AndroidCheckinRequest::clear_market_checkin() {
  market_checkin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_market_checkin();
}
inline const ::std::string& AndroidCheckinRequest::market_checkin() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.market_checkin)
  return market_checkin_.GetNoArena();
}
inline void AndroidCheckinRequest::set_market_checkin(const ::std::string& value) {
  set_has_market_checkin();
  market_checkin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.market_checkin)
}
#if LANG_CXX11
inline void AndroidCheckinRequest::set_market_checkin(::std::string&& value) {
  set_has_market_checkin();
  market_checkin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.market_checkin)
}
#endif
inline void AndroidCheckinRequest::set_market_checkin(const char* value) {
  set_has_market_checkin();
  market_checkin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.market_checkin)
}
inline void AndroidCheckinRequest::set_market_checkin(const char* value, size_t size) {
  set_has_market_checkin();
  market_checkin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.market_checkin)
}
inline ::std::string* AndroidCheckinRequest::mutable_market_checkin() {
  set_has_market_checkin();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.market_checkin)
  return market_checkin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinRequest::release_market_checkin() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.market_checkin)
  clear_has_market_checkin();
  return market_checkin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinRequest::set_allocated_market_checkin(::std::string* market_checkin) {
  if (market_checkin != NULL) {
    set_has_market_checkin();
  } else {
    clear_has_market_checkin();
  }
  market_checkin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market_checkin);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.market_checkin)
}

// repeated string account_cookie = 11;
inline int AndroidCheckinRequest::account_cookie_size() const {
  return account_cookie_.size();
}
inline void AndroidCheckinRequest::clear_account_cookie() {
  account_cookie_.Clear();
}
inline const ::std::string& AndroidCheckinRequest::account_cookie(int index) const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.account_cookie)
  return account_cookie_.Get(index);
}
inline ::std::string* AndroidCheckinRequest::mutable_account_cookie(int index) {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.account_cookie)
  return account_cookie_.Mutable(index);
}
inline void AndroidCheckinRequest::set_account_cookie(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.account_cookie)
  account_cookie_.Mutable(index)->assign(value);
}
inline void AndroidCheckinRequest::set_account_cookie(int index, const char* value) {
  account_cookie_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.account_cookie)
}
inline void AndroidCheckinRequest::set_account_cookie(int index, const char* value, size_t size) {
  account_cookie_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.account_cookie)
}
inline ::std::string* AndroidCheckinRequest::add_account_cookie() {
  // @@protoc_insertion_point(field_add_mutable:checkin_proto.AndroidCheckinRequest.account_cookie)
  return account_cookie_.Add();
}
inline void AndroidCheckinRequest::add_account_cookie(const ::std::string& value) {
  account_cookie_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinRequest.account_cookie)
}
inline void AndroidCheckinRequest::add_account_cookie(const char* value) {
  account_cookie_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:checkin_proto.AndroidCheckinRequest.account_cookie)
}
inline void AndroidCheckinRequest::add_account_cookie(const char* value, size_t size) {
  account_cookie_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:checkin_proto.AndroidCheckinRequest.account_cookie)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AndroidCheckinRequest::account_cookie() const {
  // @@protoc_insertion_point(field_list:checkin_proto.AndroidCheckinRequest.account_cookie)
  return account_cookie_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AndroidCheckinRequest::mutable_account_cookie() {
  // @@protoc_insertion_point(field_mutable_list:checkin_proto.AndroidCheckinRequest.account_cookie)
  return &account_cookie_;
}

// optional string time_zone = 12;
inline bool AndroidCheckinRequest::has_time_zone() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AndroidCheckinRequest::set_has_time_zone() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AndroidCheckinRequest::clear_has_time_zone() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AndroidCheckinRequest::clear_time_zone() {
  time_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time_zone();
}
inline const ::std::string& AndroidCheckinRequest::time_zone() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.time_zone)
  return time_zone_.GetNoArena();
}
inline void AndroidCheckinRequest::set_time_zone(const ::std::string& value) {
  set_has_time_zone();
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.time_zone)
}
#if LANG_CXX11
inline void AndroidCheckinRequest::set_time_zone(::std::string&& value) {
  set_has_time_zone();
  time_zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.time_zone)
}
#endif
inline void AndroidCheckinRequest::set_time_zone(const char* value) {
  set_has_time_zone();
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.time_zone)
}
inline void AndroidCheckinRequest::set_time_zone(const char* value, size_t size) {
  set_has_time_zone();
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.time_zone)
}
inline ::std::string* AndroidCheckinRequest::mutable_time_zone() {
  set_has_time_zone();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.time_zone)
  return time_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinRequest::release_time_zone() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.time_zone)
  clear_has_time_zone();
  return time_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinRequest::set_allocated_time_zone(::std::string* time_zone) {
  if (time_zone != NULL) {
    set_has_time_zone();
  } else {
    clear_has_time_zone();
  }
  time_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_zone);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.time_zone)
}

// optional fixed64 security_token = 13;
inline bool AndroidCheckinRequest::has_security_token() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AndroidCheckinRequest::set_has_security_token() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AndroidCheckinRequest::clear_has_security_token() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AndroidCheckinRequest::clear_security_token() {
  security_token_ = GOOGLE_ULONGLONG(0);
  clear_has_security_token();
}
inline ::google::protobuf::uint64 AndroidCheckinRequest::security_token() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.security_token)
  return security_token_;
}
inline void AndroidCheckinRequest::set_security_token(::google::protobuf::uint64 value) {
  set_has_security_token();
  security_token_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.security_token)
}

// optional int32 version = 14;
inline bool AndroidCheckinRequest::has_version() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AndroidCheckinRequest::set_has_version() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AndroidCheckinRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AndroidCheckinRequest::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 AndroidCheckinRequest::version() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.version)
  return version_;
}
inline void AndroidCheckinRequest::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.version)
}

// repeated string ota_cert = 15;
inline int AndroidCheckinRequest::ota_cert_size() const {
  return ota_cert_.size();
}
inline void AndroidCheckinRequest::clear_ota_cert() {
  ota_cert_.Clear();
}
inline const ::std::string& AndroidCheckinRequest::ota_cert(int index) const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.ota_cert)
  return ota_cert_.Get(index);
}
inline ::std::string* AndroidCheckinRequest::mutable_ota_cert(int index) {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.ota_cert)
  return ota_cert_.Mutable(index);
}
inline void AndroidCheckinRequest::set_ota_cert(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.ota_cert)
  ota_cert_.Mutable(index)->assign(value);
}
inline void AndroidCheckinRequest::set_ota_cert(int index, const char* value) {
  ota_cert_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.ota_cert)
}
inline void AndroidCheckinRequest::set_ota_cert(int index, const char* value, size_t size) {
  ota_cert_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.ota_cert)
}
inline ::std::string* AndroidCheckinRequest::add_ota_cert() {
  // @@protoc_insertion_point(field_add_mutable:checkin_proto.AndroidCheckinRequest.ota_cert)
  return ota_cert_.Add();
}
inline void AndroidCheckinRequest::add_ota_cert(const ::std::string& value) {
  ota_cert_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinRequest.ota_cert)
}
inline void AndroidCheckinRequest::add_ota_cert(const char* value) {
  ota_cert_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:checkin_proto.AndroidCheckinRequest.ota_cert)
}
inline void AndroidCheckinRequest::add_ota_cert(const char* value, size_t size) {
  ota_cert_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:checkin_proto.AndroidCheckinRequest.ota_cert)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AndroidCheckinRequest::ota_cert() const {
  // @@protoc_insertion_point(field_list:checkin_proto.AndroidCheckinRequest.ota_cert)
  return ota_cert_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AndroidCheckinRequest::mutable_ota_cert() {
  // @@protoc_insertion_point(field_mutable_list:checkin_proto.AndroidCheckinRequest.ota_cert)
  return &ota_cert_;
}

// optional int32 fragment = 20;
inline bool AndroidCheckinRequest::has_fragment() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AndroidCheckinRequest::set_has_fragment() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AndroidCheckinRequest::clear_has_fragment() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AndroidCheckinRequest::clear_fragment() {
  fragment_ = 0;
  clear_has_fragment();
}
inline ::google::protobuf::int32 AndroidCheckinRequest::fragment() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.fragment)
  return fragment_;
}
inline void AndroidCheckinRequest::set_fragment(::google::protobuf::int32 value) {
  set_has_fragment();
  fragment_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.fragment)
}

// optional string user_name = 21;
inline bool AndroidCheckinRequest::has_user_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AndroidCheckinRequest::set_has_user_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AndroidCheckinRequest::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AndroidCheckinRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& AndroidCheckinRequest::user_name() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.user_name)
  return user_name_.GetNoArena();
}
inline void AndroidCheckinRequest::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.user_name)
}
#if LANG_CXX11
inline void AndroidCheckinRequest::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.user_name)
}
#endif
inline void AndroidCheckinRequest::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.user_name)
}
inline void AndroidCheckinRequest::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.user_name)
}
inline ::std::string* AndroidCheckinRequest::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.user_name)
}

// optional int32 user_serial_number = 22;
inline bool AndroidCheckinRequest::has_user_serial_number() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AndroidCheckinRequest::set_has_user_serial_number() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AndroidCheckinRequest::clear_has_user_serial_number() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AndroidCheckinRequest::clear_user_serial_number() {
  user_serial_number_ = 0;
  clear_has_user_serial_number();
}
inline ::google::protobuf::int32 AndroidCheckinRequest::user_serial_number() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.user_serial_number)
  return user_serial_number_;
}
inline void AndroidCheckinRequest::set_user_serial_number(::google::protobuf::int32 value) {
  set_has_user_serial_number();
  user_serial_number_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.user_serial_number)
}

// -------------------------------------------------------------------

// AndroidCheckinResponse

// required bool stats_ok = 1;
inline bool AndroidCheckinResponse::has_stats_ok() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AndroidCheckinResponse::set_has_stats_ok() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AndroidCheckinResponse::clear_has_stats_ok() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AndroidCheckinResponse::clear_stats_ok() {
  stats_ok_ = false;
  clear_has_stats_ok();
}
inline bool AndroidCheckinResponse::stats_ok() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.stats_ok)
  return stats_ok_;
}
inline void AndroidCheckinResponse::set_stats_ok(bool value) {
  set_has_stats_ok();
  stats_ok_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.stats_ok)
}

// optional int64 time_msec = 3;
inline bool AndroidCheckinResponse::has_time_msec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AndroidCheckinResponse::set_has_time_msec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AndroidCheckinResponse::clear_has_time_msec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AndroidCheckinResponse::clear_time_msec() {
  time_msec_ = GOOGLE_LONGLONG(0);
  clear_has_time_msec();
}
inline ::google::protobuf::int64 AndroidCheckinResponse::time_msec() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.time_msec)
  return time_msec_;
}
inline void AndroidCheckinResponse::set_time_msec(::google::protobuf::int64 value) {
  set_has_time_msec();
  time_msec_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.time_msec)
}

// optional string digest = 4;
inline bool AndroidCheckinResponse::has_digest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidCheckinResponse::set_has_digest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AndroidCheckinResponse::clear_has_digest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AndroidCheckinResponse::clear_digest() {
  digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_digest();
}
inline const ::std::string& AndroidCheckinResponse::digest() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.digest)
  return digest_.GetNoArena();
}
inline void AndroidCheckinResponse::set_digest(const ::std::string& value) {
  set_has_digest();
  digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.digest)
}
#if LANG_CXX11
inline void AndroidCheckinResponse::set_digest(::std::string&& value) {
  set_has_digest();
  digest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinResponse.digest)
}
#endif
inline void AndroidCheckinResponse::set_digest(const char* value) {
  set_has_digest();
  digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinResponse.digest)
}
inline void AndroidCheckinResponse::set_digest(const char* value, size_t size) {
  set_has_digest();
  digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinResponse.digest)
}
inline ::std::string* AndroidCheckinResponse::mutable_digest() {
  set_has_digest();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinResponse.digest)
  return digest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinResponse::release_digest() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinResponse.digest)
  clear_has_digest();
  return digest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinResponse::set_allocated_digest(::std::string* digest) {
  if (digest != NULL) {
    set_has_digest();
  } else {
    clear_has_digest();
  }
  digest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), digest);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinResponse.digest)
}

// optional bool settings_diff = 9;
inline bool AndroidCheckinResponse::has_settings_diff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AndroidCheckinResponse::set_has_settings_diff() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AndroidCheckinResponse::clear_has_settings_diff() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AndroidCheckinResponse::clear_settings_diff() {
  settings_diff_ = false;
  clear_has_settings_diff();
}
inline bool AndroidCheckinResponse::settings_diff() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.settings_diff)
  return settings_diff_;
}
inline void AndroidCheckinResponse::set_settings_diff(bool value) {
  set_has_settings_diff();
  settings_diff_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.settings_diff)
}

// repeated string delete_setting = 10;
inline int AndroidCheckinResponse::delete_setting_size() const {
  return delete_setting_.size();
}
inline void AndroidCheckinResponse::clear_delete_setting() {
  delete_setting_.Clear();
}
inline const ::std::string& AndroidCheckinResponse::delete_setting(int index) const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.delete_setting)
  return delete_setting_.Get(index);
}
inline ::std::string* AndroidCheckinResponse::mutable_delete_setting(int index) {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinResponse.delete_setting)
  return delete_setting_.Mutable(index);
}
inline void AndroidCheckinResponse::set_delete_setting(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.delete_setting)
  delete_setting_.Mutable(index)->assign(value);
}
inline void AndroidCheckinResponse::set_delete_setting(int index, const char* value) {
  delete_setting_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinResponse.delete_setting)
}
inline void AndroidCheckinResponse::set_delete_setting(int index, const char* value, size_t size) {
  delete_setting_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinResponse.delete_setting)
}
inline ::std::string* AndroidCheckinResponse::add_delete_setting() {
  // @@protoc_insertion_point(field_add_mutable:checkin_proto.AndroidCheckinResponse.delete_setting)
  return delete_setting_.Add();
}
inline void AndroidCheckinResponse::add_delete_setting(const ::std::string& value) {
  delete_setting_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinResponse.delete_setting)
}
inline void AndroidCheckinResponse::add_delete_setting(const char* value) {
  delete_setting_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:checkin_proto.AndroidCheckinResponse.delete_setting)
}
inline void AndroidCheckinResponse::add_delete_setting(const char* value, size_t size) {
  delete_setting_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:checkin_proto.AndroidCheckinResponse.delete_setting)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AndroidCheckinResponse::delete_setting() const {
  // @@protoc_insertion_point(field_list:checkin_proto.AndroidCheckinResponse.delete_setting)
  return delete_setting_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AndroidCheckinResponse::mutable_delete_setting() {
  // @@protoc_insertion_point(field_mutable_list:checkin_proto.AndroidCheckinResponse.delete_setting)
  return &delete_setting_;
}

// repeated .checkin_proto.GservicesSetting setting = 5;
inline int AndroidCheckinResponse::setting_size() const {
  return setting_.size();
}
inline void AndroidCheckinResponse::clear_setting() {
  setting_.Clear();
}
inline const ::checkin_proto::GservicesSetting& AndroidCheckinResponse::setting(int index) const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.setting)
  return setting_.Get(index);
}
inline ::checkin_proto::GservicesSetting* AndroidCheckinResponse::mutable_setting(int index) {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinResponse.setting)
  return setting_.Mutable(index);
}
inline ::checkin_proto::GservicesSetting* AndroidCheckinResponse::add_setting() {
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinResponse.setting)
  return setting_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::checkin_proto::GservicesSetting >*
AndroidCheckinResponse::mutable_setting() {
  // @@protoc_insertion_point(field_mutable_list:checkin_proto.AndroidCheckinResponse.setting)
  return &setting_;
}
inline const ::google::protobuf::RepeatedPtrField< ::checkin_proto::GservicesSetting >&
AndroidCheckinResponse::setting() const {
  // @@protoc_insertion_point(field_list:checkin_proto.AndroidCheckinResponse.setting)
  return setting_;
}

// optional bool market_ok = 6;
inline bool AndroidCheckinResponse::has_market_ok() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AndroidCheckinResponse::set_has_market_ok() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AndroidCheckinResponse::clear_has_market_ok() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AndroidCheckinResponse::clear_market_ok() {
  market_ok_ = false;
  clear_has_market_ok();
}
inline bool AndroidCheckinResponse::market_ok() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.market_ok)
  return market_ok_;
}
inline void AndroidCheckinResponse::set_market_ok(bool value) {
  set_has_market_ok();
  market_ok_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.market_ok)
}

// optional fixed64 android_id = 7;
inline bool AndroidCheckinResponse::has_android_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AndroidCheckinResponse::set_has_android_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AndroidCheckinResponse::clear_has_android_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AndroidCheckinResponse::clear_android_id() {
  android_id_ = GOOGLE_ULONGLONG(0);
  clear_has_android_id();
}
inline ::google::protobuf::uint64 AndroidCheckinResponse::android_id() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.android_id)
  return android_id_;
}
inline void AndroidCheckinResponse::set_android_id(::google::protobuf::uint64 value) {
  set_has_android_id();
  android_id_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.android_id)
}

// optional fixed64 security_token = 8;
inline bool AndroidCheckinResponse::has_security_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AndroidCheckinResponse::set_has_security_token() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AndroidCheckinResponse::clear_has_security_token() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AndroidCheckinResponse::clear_security_token() {
  security_token_ = GOOGLE_ULONGLONG(0);
  clear_has_security_token();
}
inline ::google::protobuf::uint64 AndroidCheckinResponse::security_token() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.security_token)
  return security_token_;
}
inline void AndroidCheckinResponse::set_security_token(::google::protobuf::uint64 value) {
  set_has_security_token();
  security_token_ = value;
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.security_token)
}

// optional string version_info = 11;
inline bool AndroidCheckinResponse::has_version_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AndroidCheckinResponse::set_has_version_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AndroidCheckinResponse::clear_has_version_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AndroidCheckinResponse::clear_version_info() {
  version_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version_info();
}
inline const ::std::string& AndroidCheckinResponse::version_info() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.version_info)
  return version_info_.GetNoArena();
}
inline void AndroidCheckinResponse::set_version_info(const ::std::string& value) {
  set_has_version_info();
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.version_info)
}
#if LANG_CXX11
inline void AndroidCheckinResponse::set_version_info(::std::string&& value) {
  set_has_version_info();
  version_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinResponse.version_info)
}
#endif
inline void AndroidCheckinResponse::set_version_info(const char* value) {
  set_has_version_info();
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinResponse.version_info)
}
inline void AndroidCheckinResponse::set_version_info(const char* value, size_t size) {
  set_has_version_info();
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinResponse.version_info)
}
inline ::std::string* AndroidCheckinResponse::mutable_version_info() {
  set_has_version_info();
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinResponse.version_info)
  return version_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidCheckinResponse::release_version_info() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinResponse.version_info)
  clear_has_version_info();
  return version_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinResponse::set_allocated_version_info(::std::string* version_info) {
  if (version_info != NULL) {
    set_has_version_info();
  } else {
    clear_has_version_info();
  }
  version_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_info);
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinResponse.version_info)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace checkin_proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_checkin_2eproto__INCLUDED
